第一章
1.使用并发的三个重要原因
    （1）资源利用率：避免长时间等待，充分利用机器的能力
    （2）公平性：计算机中多任务执行顺序
    （3）便利性：多线程处理多任务比单线程实现要容易的多
2.“但凡做事高效的人，总能在串行性与异步性之间找到合理的平衡，对于程序来说同样如此。”
3.线程的优势：
    （1）高性能，发挥多处理的强大能力，也是计算机领域的发展趋势
    （2）简化建模，对任务分类处理。（JVM的垃圾回收机制就是典型案例）
    （3）异步事件的简化处理  （java.nio的包）
    （4）更高效灵敏的用户响应界面 （Swing、AWT）
4.线程带来的风险
    （1）安全性问题（这里说的安全不是指真正的数据安全或者信息安全，理解成结果正确更准确一些，举例说明：一个不加保护的计数器，不加线程锁，那么它的返回结果可能就说错误的，在多线程场景中可能返回出同样的计数值，那么这里就称它是“线程不安全” 的）
    （2）活跃性问题（事情最终是否会发生/这个代码最终是否会被执行），标准示例就是：死锁、饥饿、活锁
    （3）性能问题，比较宽泛：例如资源泄露、频繁切换线程等等
4.由于很多框架中就使用到了线程，所以一些实现类代码中也要考虑到多线程并发的场景。例如Servlet、JSP、Timer等等

第二章  线程安全性
1.如果多个线程可以访问同一个可变的状态变量时没有使用合适的同步处理，那么程序就会出错。修复的方式有常见的三种：
	（1）不在线程之间共享该状态变量
	（2）将状态变量修改为不可变的变量
	（3）在访问状态变量时使用同步
2.线程安全性：当多个线程访问某个类时，这个类始终都能表现出正确的行为。 （正确的行为指的就是行为与设想是相同的）
3.所谓的线程安全类， 一般是指内部封装了必要的同步机制，因此客户端无需进一步采取同步措施：
	（1）一般来说servlet都是无状态的， 而无状态对象一定是线程安全的。 所以我们尽量需要保证Servlet是无状态的。
	（2）只有当对象需要保存信息时，线程安全才会成为一个问题
4.原子性
	（1）竞态条件（Race Condition）：由于不恰当的执行时序而出现不正确的结果在并发编程中是一个非常重要的问题。
	（2）最常见的竞态条件：先检查后执行， 主要问题来源是你的检查结果并不可信，这个检查结果因为时间差而导致并不一定正确。
	（3）简单来说，各种场景下都推荐使用原子状态来处理，使用现有的线程安全对象来管理类的状态比先判断对象是否安全，再进行安全处理简单得多。
5.加锁机制
	（1）要保持状态的一致性，就要保证在单个原子操作中处理所有相关的状态更新。 否则每个独立的原子操作虽然线程安全，但是多个关联的原子操作，合为一体时就并不一定安全了。
	（2）Synchronized Block 同步代码块可以有效的处理多个状态变量场景， 它将整个代码块变成了原子性操作。 一般来说，同步代码块的锁就是方法调用所在的对象，用于保证整个对象的线程安全性。
	（3）重入：如果某个线程试图获得一个已经由它自己所持有的锁，那么这个请求就会成功。
6.用锁来保护状态：并非所有数据都需要加锁保护，只有可能被多个线程同时访问的可变数据才需要。
7.滥用同步代码块，可能导致活跃性问题和性能问题：
	（1）尽可能短的代码路径持有锁

（2）用时较长的计算，一定不要持有锁

第三章   对象的共享
1.可见性
	（1）如果不加合理的锁，那么不同线程上看见的数据可能不一致，导致实销数据的问题。
	（2）内置锁可以保证所有线程都能看到共享变量的最新值，而不会获得一个失效值。
	（3）volatile是一种弱同步，但是可以保证所有获取数据的地方读取内存中最新写入的值。（但不推荐过度依赖volatile来控制状态的可见性， 它比锁的同步机制脆弱，过度依赖可能导致难以理解的问题）
	（4）锁机制又可以保证内存可见性，也可以保证操作原子性。 但是volatile只能保证可见性，不能保证操作原子性。
2.发布与逸出
	（1）简单地说，public或者protect就是不同程度上的对外发布。
	（2）在发布中包含了一些理论上不想发布的对象，那么这个对象就逸出了。 比如说：private的变量，但是在public函数中引用了，那么外部就能操作这个变量，我们就说这个变量逸出了。
	（3）不要再构造过程中使this引用逸出。
	（4）在构造函数创建线程时不要立刻启动它，可以通过start或者initialize的方法来启动
3.线程封闭
	（1）仅在单线程内访问数据，就不需要同步。 这是最简单的实现线程安全性的方式之一。
	（2）Ad-hoc线程封闭：指完全由程序来实现线程封闭，是脆弱的，不可取的。
	（3）栈封闭：通过局部变量和控制引用来实现，但是也不太好，容易出错。
	（4）ThreadLocal：推荐使用，本身提供了get/Set方法，通过每个线程独立副本的方式， 保证了每个线程的封闭性。 但是它本身也会被滥用，由于它类似于全局变量，会降低代码的可重用性，并在类之间引入隐含的耦合性，因此使用时也要格外小心。
4.不变性
	（1）不可变对象：满足三点条件的对象才是不可变的
		1.对象创建后其状态就不能修改
		2.对象的所有域都是final类型
		3.对象是正确创建的（创建期间没有this引用逸出）
	（2）Finale域：
		1.除非必要开发，应该将所有的域都声明为私有域
		2.除非必要可变，应该将所有的域都生命为final域
	（3）使用Volatile来发布不可变对象， 对象不可修改但是可以被覆盖。 Volatile保证拿到的是最新的对象。
5.安全的发布
	（1）任何线程都可以在不需要额外同步的情况下安全的访问不可变对象
	（2）安全发布的常用模式
		1.在静态初始化函数中初始化一个对象引用
		2.将对象的引用保存在volatile类型的域或者AtomicReference对象中
		3.将对象的引用保存在某衣蛾正确构造对象的final类型域中
		4.将对象的引用保存在一个由锁保护的域中
	（3）对象的发布取决于它的可变性：
		1.不可变对象（声明为不可变）可以通过任意机制来发布
		2.事实不可变对象（创建后实际没有任何地方可以修改它）必须通过安全方式来发布
		3.可变对象必须通过安全方式发布，并且必须是线程安全的或者由锁保护的
总结一下：
	在并发程序中使用和共享对象时，可以使用一些使用的策略，例如：
	1.线程封闭：线程封闭的对象只能由一个线程拥有，对象被封闭在该线程中，并且只能由这个线程修改。
	2.只读共享：任何线程都不能修改这个对象，只能读取。
	3.线程安全共享：线程安全的对象再其内部实现同步，其他调用者不需要额外的同步处理。
	4.保护对象：被保护的对象只能通过持有特定的锁来访问。
